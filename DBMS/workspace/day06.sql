--문자열 붙임, 자르기, 길이
--CONCAT(), SUBSTR(시작번호, 길이), LENGTH()
SELECT CONCAT('FLO', 'WER'), SUBSTR('FLOWER', 3),
	SUBSTR('FLOWER', 1, 2), LENGTH('FLOWER')
FROM DUAL;

--BUSAPPLEFLOWER에서 BUS, APPLE, FLOWER 자르기
SELECT SUBSTR('BUSAPPLEFLOWER', 1, 3),
	SUBSTR('BUSAPPLEFLOWER', 4, 5),
	SUBSTR('BUSAPPLEFLOWER', 9)
FROM DUAL;

--JOIN
--EMP 테이블 사원번호로 DEPT 테이블의 지역 검색하기
SELECT E.DEPTNO, E.ENAME, D.LOC
FROM EMP E JOIN DEPT D
ON E.DEPTNO = D.DEPTNO;

--PLAYER 테이블에서 송종국 선수가 속한 팀의 전화번호 검색하기
SELECT P.TEAM_ID, P.PLAYER_NAME, T.TEL
FROM PLAYER P JOIN TEAM T
ON P.TEAM_ID = T.TEAM_ID AND PLAYER_NAME = '송종국';

SELECT P.TEAM_ID, P.PLAYER_NAME, T.TEL
FROM PLAYER P JOIN TEAM T
ON P.TEAM_ID = T.TEAM_ID
WHERE PLAYER_NAME = '송종국';

--JOBS 테이블에서 JOB_ID로 EMPLOYEES의 EMAIL, 성 이름 검색
--CONCATENATION 사용
SELECT J.JOB_ID, J.JOB_TITLE, 
	E.EMAIL, E.LAST_NAME||' '||E.FIRST_NAME AS 이름
FROM JOBS J JOIN EMPLOYEES E
ON J.JOB_ID = E.JOB_ID;



--PLAYER 테이블에서 전체 평균키보다 큰 선수들을 TEAM_ID별로 묶고
--TEAM_ID, TEAM_NAME, 그룹별 평균키, 전체 평균키 검색
--TEAM_ID로 오름차순 정렬
--예)
--TEAM_ID	TEAM_NAME	그룹별 평균키	전체 평균키
--K06		아이파크		키			키
SELECT P.TEAM_ID, T.TEAM_NAME, ROUND(AVG(HEIGHT), 2) "그룹별 평균키",
	ROUND((SELECT AVG(HEIGHT) FROM PLAYER), 2) "전체 평균키"
FROM PLAYER P JOIN TEAM T
ON P.TEAM_ID = T.TEAM_ID
WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER)
GROUP BY P.TEAM_ID, TEAM_NAME
ORDER BY 1;

--EMPLOYEES 테이블에서 평균급여보다 높은 사원들 JOB_ID별로 묶고
--JOB_ID, DEPARTMENT_NAME, 그룹별 평균급여, 전체 평균 급여 검색
--그룹별 평균 급여 기준 내림차순으로 정렬
SELECT E.JOB_ID, D.DEPARTMENT_NAME, AVG(SALARY) "그룹별 평균 급여",
ROUND((SELECT AVG(SALARY) FROM EMPLOYEES), 2) "전체 평균 급여"
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES)
GROUP BY E.JOB_ID, D.DEPARTMENT_NAME
ORDER BY 3 DESC;

--비등가 조인
--급여로 등급 나누기
SELECT * FROM SALGRADE;

SELECT E.EMPNO, D.DNAME, E.SAL, S.GRADE 
FROM EMP E JOIN SALGRADE S
ON E.SAL BETWEEN S.LOSAL AND S.HISAL
JOIN DEPT D 
ON E.DEPTNO = D.DEPTNO;

SELECT E.EMPNO, D.DNAME, E.SAL, S.GRADE
FROM EMP E, SALGRADE S, DEPT D
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
AND E.DEPTNO = D.DEPTNO;

--EMPLOYEES 테이블에서 HIREDATE가
--2003년~2005년까지인 사원 검색
--HIRE_DATE, FIRST_NAME, DEPARTMENT_NAME
--HIRE_DATE순으로 정렬
--HTML파일로 열어놓기
SELECT TO_CHAR(E.HIRE_DATE, 'YYYY-MM') "입사 날짜",
E.FIRST_NAME 이름, D.DEPARTMENT_NAME 부서명
FROM EMPLOYEES E
JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID AND
E.HIRE_DATE BETWEEN TO_DATE('2003-01', 'YYYY-MM') AND TO_DATE('2006-01', 'YYYY-MM')
ORDER BY E.HIRE_DATE;

--네츄럴 조인(NATURAL JOIN)
SELECT *
	FROM EMP E INNER JOIN DEPT D
		ON E.DEPTNO = D.DEPTNO;

SELECT *
	FROM EMP E JOIN DEPT D
		USING(DEPTNO);
	
SELECT *
	FROM EMP NATURAL JOIN DEPT;

--외부 조인(OUTER JOIN)
--LEFT OUTER JOIN
SELECT S.STADIUM_NAME, S.STADIUM_ID,
	S.SEAT_COUNT, S.HOMETEAM_ID
FROM STADIUM S LEFT OUTER JOIN TEAM T
ON S.HOMETEAM_ID = T.TEAM_ID AND HOMETEAM_ID IS NOT NULL;

SELECT S.STADIUM_NAME, S.STADIUM_ID,
	S.SEAT_COUNT, S.HOMETEAM_ID
FROM STADIUM S LEFT OUTER JOIN TEAM T
ON S.HOMETEAM_ID = T.TEAM_ID
WHERE HOMETEAM_ID IS NOT NULL;

--RIGHT OUTER JOIN
SELECT S.STADIUM_NAME, S.STADIUM_ID,
	S.SEAT_COUNT, S.HOMETEAM_ID 
FROM STADIUM S RIGHT OUTER JOIN TEAM T
ON S.HOMETEAM_ID = T.TEAM_ID;

--FULL OUTER JOIN
SELECT S.STADIUM_NAME, S.STADIUM_ID,
	S.SEAT_COUNT, S.HOMETEAM_ID 
FROM STADIUM S FULL OUTER JOIN TEAM T
ON S.HOMETEAM_ID = T.TEAM_ID;

--크로스 조인(CROSS JOIN)
--거의 쓰지 않음. 이론상 존재
SELECT * 
FROM EMPLOYEES E CROSS JOIN DEPARTMENTS D;
--목적 : 모든 경우를 고려한다.

--SELF 조인
SELECT E1.ENAME 사원, E2.ENAME 매니저 FROM EMP E1 JOIN EMP E2
ON E1.MGR = E2.EMPNO;




