2차원 배열
	배열 안에 배열
	한번 접근해도 주소값(행)	
	두번 접근해야 값(열)
	
	1차원 배열이 여러개 필요할 때 같은 자료형이라면	
	2차원 배열로 선언한다.

2차원 배열 선언
	자료형 배열명 [][] = {{값1, 값2,...}, {값3, 값4, ...}, ...};
	자료형 배열명 [행][열] = {{값1, 값2,...}, {값3, 값4, ...}, ...};
	자료형 배열명 [행][열] = {초기값, };


		□	arrData		
	       □ □	arrData[행]	한번 접근하면 주소값
	   □□□	   □□□	arrData[열]	두번 접근하면 값

		*(*(arrData + 행) + 열) : arrData[행][열]


문자열 배열
	char arData[문자열 갯수][문자열의 문자 갯수] = {"","",...};

	문자열은 문자배열 즉, 1차원 배열이다. 따라서 여러개의 문자열을 저장하고자 한다면
	2차원 배열이 필요하다.
	문자열마다 문자의 개수가 다르므로 동적배열을 사용해야 하고
	정적배열을 사용해야할 때에는 열 갯수를 충분히 할당해준다.


2차원 배열의 사용
	int arrData[2][3] = {{3,4,5},{9,8,7}};
	*시작주소는 100번지라고 가정한다.
	arrData[0] + 2				: arrData[0][2]의 주소값(108번지)
	arrData + 1				: arrData[1][0]의 주소값(112번지)
	*arrData[1]				: 9
	 *(arrData + 0) + 1			: 4의 주소값(104번지)
	*(arrData[1] + 1)			: 8
	*(arrData[0] + 2) = arrData[1][2]	: {{3,4,7},{9,8,7}}	
	arrData[1][1] = *(arrData[0] + 1)	: {{3,4,5},{9,4,7}}





정방 배열
	모든 행의 열 개수가 모두 같은 배열

비정방 배열
	행별로 열 개수가 하나라도 다른 배열	



(*4차원 배열)
[2][3][4][5]
2의 3면 4행 5열










