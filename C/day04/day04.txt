비트 연산
	논리 연산자

	& AND(논리곱)		: 두 비트 모두 1일 때 1
	| OR (논리합)		: 둘 중 하나라도 1이면 1
	^ XOR(배타논리합)	: 두 비트가 서로 다르면 1


	단항 연산자

	
	~ NOT(논리부정)		: 0은 1로 1은 0으로 변경
				~a = -a-1

부호 비트
	비트는 우에서 좌로 읽으며 좌측에 있는 비트가 최상위 비트
	부호비트는 최상위 비트이며 0은 양수, 1은 음수이다.


비트 이동
	<< (LEFT SHIFT) a << b : a를 b만큼 좌로 비트이동
	>> (RIGHT SHIFT) a >> b : a를 b만큼 우로 비트이동


	빈 칸은 0으로 채워지고(음수는 1) 비트가 넘어가면
	자동으로 잘린다.

----------------------------------------------------------------------
조건식
	결과가 참 또는 거짓, 둘 중 하나가 나오는 식
	

	거짓 	: 0
	참 	: 0이외의 모든 수(1)

	
관계 연산자
	==	: 같다.
	!=	: 같지 않다.
	> , <	: 초과, 미만
	>= , <=	: 이상, 이하
	

논리 연산자(조건식이 2개 이상일 때 사용)
	&& AND	: A && B 두 조건식 모두 참이면 참
	|| OR	: A || B 둘 중 하나라도 참이면 참



단항 연산자
	! NOT	: 참이면 거짓으로 거짓이면 참으로 변경
--------------------------------------------------------------------------

삼항 연산자( ? : )

	조건식? 참 : 거짓
	1. 조건식 ? 값1 : 값2
		int result = (10 > 1 ? 10 : 1) + 4;
	2. 조건식 ? 문장1 : 문장2
		10 > 1 ? printf("10") : printf("1"); 

--------------------------------------------------------------------------
제어문
	조건문
		if문

if(조건식) {
	실행할 문장;
위의 조건식에 상관 없이 모두 검사.
}
if(조건식) {
	실행할 문장;
}
if(조건식) {
	실행할 문장;
}


if(조건식) {
	실행할 문장;
위의 조건식이 참이면 모두 검사 안함.
} else if(조건식) {
	실행할 문장;
} else {
	실행할 문장;
}



삼항 연산자는 if문보다 속도가 더 빠르다. 하지만 메모리를 더 사용한다.
if문은 속도가 더 느린 대신 메모리를 덜 사용한다.


		switch문
	반복문
































