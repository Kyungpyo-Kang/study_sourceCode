list
	여러 개의 저장공간이 나열되어 있는 것

사용 목적
	1. 변수를 여러 번 선언하지 않고 
	   여러 칸 list를 한번만 선언하기 위해서 사용한다.
	   따라서 이름이 많을수록 관리하기 어렵고
	   인덱스를 통해서 문제를 해결한다.

	   변수 선언 시 값이 한 개만 담기고 이름도 반드시 붙여야 한다.
	   여러 변수를 선언하면 이름도 많아져서 관리하기 불편하다.
	   따라서 list는 이름이 하나고 각 값을 인덱스로 접근하기 때문에
	   값을 관리하기 훨씬 편하고 쉽다.

	2. 규칙성 없는 값에 규칙성을 부여하기 위해서 사용

list 선언
	list명 = [값1, 값2,...]
	list명 = [값] * 칸수	→ 초기화에 사용

lsit 길이
	len(list명)

list 사용

	dataList = [1, 2, 3]

	-값 넣기
		  (추가)
		  list명.append(값)
		  dataList.append(4)
		  결과 : [1, 2, 3, 4]

		  (삽입)
		  list명.insert(인덱스번호, 값)
		  dataList.insert(1, 1.5)
		  결과 : [1, 1.5, 2, 3, 4]

	-값 삭제
		  list명.remove(값)
		  중복 시 먼저 나온 값을 삭제(좌에서 우로 간다.)
		  1, 2, 2, 3

		  del list명[인덱스]
		  인덱스로 삭제

		  list명.clear()
		  모든 값 삭제

	-값 검색
		  list명.index(값)
		  값이 들어 있는 저장공간의 인덱스 번호
		  중복 시 먼저 나온 값의 인덱스 번호

	-값 수정
		  list명[index] = 수정할 값


for문 사용
	for i in range (len(list명)) :
		list명[i]
빠른 for문(향상된 for문, forEach문)

	for i in list명 :
		i


변수 : 값을 담기 위한 저장공간
포인터 : 주소값

cf) 
포인터 변수 : 포인터(주소값)을 담기 위한 저장공간	▶	줄여서 포인터
포인터 상수 : 

명령어 
	id()	→	해당 변수의 주소값을 리턴

리스트는 포인터다!!
ex) 4칸의 배열
	dataList = [1,2,3,4]
	dataList : 4개의 저장공간을 담고 있는 포인터 

값의 유무 확인
	값 in list명 : 값이 list안에 있으면 참
	값 not in list명 : 값이 list안에 없으면 참










