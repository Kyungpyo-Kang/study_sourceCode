Object 클래스
	최상위 부모 클래스
	클래스 선언시 자동으로 상속받는다.

1. equals()	: 주소값 비교
    ==		: 주소값 비교

   String 클래스에서 Object에 선언된 equals()를
   값 비교로 재정의 했다.
   따라서 String 객체에서 equals()를 사용하면 값 비교이다.

2. hashCode()
	데이터 관리 기법 중 하나이며, 다량의 데이터를 저장
	하는 것이 가능하고 빠른 검색 속도를 갖는다.
	String클래스에서 오버라이딩 했으며,
	값이 같으면 같은 해쉬코드를 갖는다.
---------------------------------------------------------------------
Wrapper Class(Integer, Float, Double, Character, String)

클래스타입 = 일반타입	: boxing(박싱)
일반타입 = 클래스타입	: unboxing(언박싱)

JDK1.5버전 이후는 오토박싱과 오토언박싱이 가능하다.

Wrapper 클래스를 사용하는 이유
	기본형 타입을 객체로 다뤄야할 때
	매개변수로 객체를 넘겨야 할 때
	기본형 타입이 아닌 객체로 저장해야할 때
	객체간의 비교가 필요할 때
------------------------------------------------------------------
빠른 for문(향상된 for문, forEach문)

for(자료형 변수명 : 배열명){
	syso(변수명)
}
---------------------------------------------------------------------
제네릭(Generic)
	자료형을 정하지 않는 기법
	사용시 타입을 지정하지 않으면
	default 타입은 Object이다.
	따라서 Wrapper 클래스 타입만 적용된다.

<대문자>

E - Element
K - Key
N - Number
T - Type
V - Value

1. Generic Class
	클래스 내부에서 사용될 자료형을 지정한다.	


2. Generic Method
	메소드 내부에서 사용될 자료형을 지정한다.

	클래스에 제네릭을 선언하지 않고,
	메서드에만 제네릭을 선언하는 방법
	메소드의 매개변수 또는 리턴타입이 제네릭이라면
	리턴타입 앞에도 제네릭을 선언해야 한다.

3. Generic Interface
	인터페이스명 뒤에 제네릭은 선언하고
	추상메소드에 제네릭을 사용한다.
	지정받는 구현 클래스에서 타입을 정한다.
-----------------------------------------------------------------
컬렉션 프레임워크(Collection Framework)

	많은 데이터를 쉽고 효과적으로 관리할 수 있는
	표준화 된 방법을 제공하는 클래스의 집합.
	자료를 하나의 정보로 만들어주는 기본 API

List와 Set 인터페이스는 공통요소를 Collection 인터페이스에서
정의하고, 두 인터페이스는 그것을 상속받는다.

1. List extends Collection

2. Set extends Collection
------------------------------------------------------------------
3. Map

------------------------------------------------------------------
구현 클래스

ArrayList
	컬렉션 클래스 중 가장 많이 사용하는 클래스
	배열을 이용해서 인덱스로 값에 접근한다.

	인덱스를 이용해서 배열 요소에 빠르게 접근 가능
	크기를 늘리기 위해서는 검사작업이 이루어지고
	이미 사용중이라면 새롭게 다른 곳에 생성되고
	기존의 값들을 옮겨야 하므로 배열보다
	상대적으로 느리다. 하지만 편하다.

Collections : 유용한 기능들을 모아놓은 클래스

















































