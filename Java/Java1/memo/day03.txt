연산자

	연산자의 우선순위
	
	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자


	결합성
		한 문장안에 같은 우선순위의 연산자가 있을 때
		각 연산자의 방향에 맞게 결합되어 연산되는 성질

비트 연산

논리 연산자
	AND(&, 논리곱)		: 두 비트 모두 1일때 1
	OR (|, 논리합)		: 둘 중 하나라도 1일때 1
	XOR(^, 배타논리합)	: 두 비트가 다르면 1

단항 연산자
	NOT(~, 비트뒤집기)	: ~a = -(a+1)


부호 비트 : 0은 양수, 1은 음수


	문제) 1 1111 0111를 10진수로 나타내라.

	1. 우에서 좌로 읽는다.
	2. 1을 찾는다.
	3. 그 다음 비트부터 비트를 뒤집는다.
	   ex)0 0000  1001	
	4. 10진수로 바꾼다.
	   ex)9
	5. -를 붙여준다.
	   정답)-9

쉬프트 연산자(비트 이동)

<< : LEFT SHIFT (좌쉬프트)
>> : RIGHT SHIFT (우쉬프트)

	a << b	: a를 b만큼 좌로 비트이동
	a >> b	: a를 b만큼 우로 비트이동

	비트가 넘어가면 자동으로 잘리고 빈 자리는 0으로 채워진다.(음수는 1)
-----------------------------------------------------------------------------------------
조건식	: 결과가 참 또는 거짓중 하나만 나오는 식
	
	관계 연산자

		==	: 같다.
		!=	: 같지 않다.
		>, <	: 초과, 미만
		>=, <=	: 이상, 이하


	논리 연산자
	
		A && B	: A와 B조건식 모두 참일 때 참
		A || B	: 둘 중 하나라도 참이면 참

	단항 연산자

		!A	: 참이면 거짓으로 거짓이면 참으로 바뀐다.



삼항 연산자

	조건식 ? true : false
------------------------------------------------------------------------------------------
제어문

	조건문

		if문
	
	if(조건식){
		실행할 문장
	}
	위의 조건식과 상관없이 모두 검사
	if(조건식){
		실행할 문장
	}
	if(조건식){
		실행할 문장
	}
-------------------------------------
	if(조건식){
		실행할 문장
	}
	위의 조건식이 거짓이면 검사
	else if(조건식){
		실행할 문장
	}	
	else{
		실행할 문장
	}


		switch문

	switch(변수명){
	case 값:
		실행할 문장
		break;
	case 값:
		실행할 문장
		break;
	case 값:
		실행할 문장
		break;
	defalut:
		실행할 문장
	}


	if문은 조건식에서 비교(같다 이외), 여러 조건식 비교일 때 사용하고
	switch문은 하나의 변수에 여러 값이 같은지 비교할 때 사용한다.

------------------------------------------------------------------------------------------
대입 연산자(복합 대입 연산자, 누적 연산자)
+=, -=, *=, /=,...

	int money = 10000
	//money = money - 500
	money -= 500


	int data = 10;
	//data = data + 1;
	//data += 1;
	data++;


증감 연산자(++, --)

	전위형 : 해당 줄부터 적용된다.
		++data

	후위형 : 다음 줄부터 적용된다.
		data++


	반복문

		for문

		  int i = 0; i < 10  i = i + 1
		for(초기식; 조건식; 증감식){
			반복할 문장;
		}












		while문

		do~while문











































